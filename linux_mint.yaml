# Prepares LinuxMint19/20 desktop.
# start from preparing ssh:
# sudo apt install openssh-server ntp;systemctl enable ssh && systemctl start ssh
#
- name: prepare_mint_desktop
  hosts: all
  vars:
    install_optional: true                    # should optional packages be installed?
    install_deb: true                         # should extra deb packages should be installed
    install_flatpak: true
    install_vscode_extensions: true           # should we install extra vscode extensions
    install_mitogen: false                    # true by default
    install_state: latest                     # if set to latest, every pass of playbook will also update packages
    config_ansible: true                      # do changes in change ansible.cfg
    config_dconf: true                        # do changes in dconf editor
    config_sysctl: true                       # do changes in sysctl
    retries_count: 4                          # how many retries
    delay_time: 15                            # delay time in seconds between retries
    bin_path: /usr/local/bin                  # Where to put all downloaded execs.
    reboot_required: false                    # force reboot even if apt upgrade won't change anything
    unpack_folder: /tmp/linux_mint            # folder to which we're going to unpack and download files
  become: true
  gather_facts: no
  pre_tasks:
  # To support ansible_connection type "local", use fact for become_user
  - name: set_fact_active_user
    set_fact:
      active_user: "{{ ansible_ssh_user }}"     # user for which you're setting folders. By default taken from group_vars
    tags:
    - base
  # ansible version
  - name: verify_ansible_meets_version_requirements
    assert:
      that: "ansible_version.full is version_compare('2.9', '>=')"
      msg: >
        "You must update Ansible to at least 2.9 to use this version of playbook"
    tags:
    - assert
  # setup module - we need these facts
  - name: run_initial_setup_instead_of_gather_facts
    setup:
      gather_timeout: 30
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_setup_status
    until: r_setup_status is success
    tags:
    - assert
  # free space for stuff
  - name: assert_root_partition_is_15_GB_of_free_space
    assert: { that: item.size_available > 13622320128 } # 20 GB free
    loop: '{{ ansible_mounts }}'
    ignore_errors: no
    when: item.mount == '/'
    tags:
    - assert
  # check that ansible_ssh_user have been defined
  - name: assert_active_user_have_been_defined_and_has_value
    assert:
      that: active_user is defined and active_user | length >0
      msg: >
        "Specify user in group_vars or passed in variable active_user"
    tags:
    - assert
  # load variables
  - name: load_vars_depending_on_distribution
    include_vars:
      dir: .
      files_matching: "mint{{ ansible_distribution_major_version }}.*.yaml"
    any_errors_fatal: true
    ignore_errors: false
    register: r_load_vars
    until: r_load_vars is success
    changed_when: false
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    failed_when: r_load_vars is failed or r_load_vars.ansible_included_var_files is not defined
    tags:
    - assert
  tasks:
  # we need proper time to refresh repositories
  - name: make_sure_timesyncd_is_installed
    apt:
      name: systemd-timesyncd
      state: present
      update_cache: yes
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_systemd_timesyncd
    until: r_systemd_timesyncd is success
    when: ansible_distribution_major_version|int > 19
    any_errors_fatal: true
    tags:
    - packages
    - base
  - name: start_timesyncd_service
    systemd:
      name: systemd-timesyncd
      state: started
      enabled: true
    changed_when: false
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_start_timesyncd
    until: r_start_timesyncd is success
    tags:
    - base
  - name: start_timedatectl_set_ntp
    shell: timedatectl set-ntp on
    tags:
    - base
    changed_when: false
# Install apt pgp keys (files)
  - name: install_apt_keys
    apt_key:
      url: "{{ item }}"
      state: present
    loop: "{{ keys }}"
    register: r_keys
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: r_keys is success
    any_errors_fatal: true
    tags:
    - keys
    - base
  - name: install_custom_apt_keys
    apt_key:
      url: "{{ item }}"
      state: present
    loop: "{{ custom_keys | default([]) }}"
    register: r_custom_keys
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: r_custom_keys is success
    when: custom_keys is defined
    any_errors_fatal: true
    tags:
    - keys
    - base
    - custom
# remove obsolete repositories
  - name: remove_obsolete_repositories_from_variables_file
    apt_repository:
      repo: "{{ item.repo }}"
      state: absent
    loop: "{{ repositories_remove }}"
    retries: "{{ retries_count }}"
    delay: 3
    register: repositories_remove
    until: repositories_remove  is success
    any_errors_fatal: false
    tags:
    - repositories
    - base
# remove absolete keys
  - name: remove_obsolete_apt_keys
    apt_key:
      id: "{{ item }}"
      state: absent
    loop: "{{ keys_remove }}"
    register: remove_keys
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: remove_keys is success
    any_errors_fatal: true
    tags:
    - keys
    - base
# Add basic repositories
  - name: add_basic_repositories_from_variables_file
    apt_repository:
      repo: "{{ item.repo }}"
      state: present
      codename: "{{ codename }}"
      filename: "{{ item.filename }}"
    loop: "{{ repositories }}"
    retries: "{{ retries_count }}"
    delay: 3
    register: repositories
    until: repositories  is success
    any_errors_fatal: false
    tags:
    - repositories
    - base
  - name: add_custom_basic_repositories_from_variables_file
    apt_repository:
      repo: "{{ item.repo }}"
      state: present
      codename: "{{ codename }}"
      filename: "{{ item.filename }}"
    loop: "{{ custom_repositories }}"
    retries: "{{ retries_count }}"
    delay: 3
    register: custom_repositories
    until: custom_repositories  is success
    when: custom_repositories is defined and custom_repositories|length >0
    any_errors_fatal: false
    tags:
    - repositories
    - base
    - custom
# Add optional repositories
  - name: add_optional_repositories_from_variables_file
    apt_repository:
      repo: "{{ item.repo }}"
      state: present
      codename: "{{ item.codename }}"
      filename: "{{ item.filename }}"
    loop: "{{ repositories_optional }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: repositories
    until: repositories  is success
    any_errors_fatal: false
    tags:
    - repositories
    - base
  - name: apt_initial_refresh
    apt:
      update_cache: yes
    ignore_errors: true
    any_errors_fatal: false
    changed_when: false
    register: r_apt_initial_refresh
    retries: "{{ retries_count }}"
    delay: 3
    until: r_apt_initial_refresh is success
    tags:
    - packages
    - base
# make sure all dpkg are already configured
  - name: reconfigure_all_waiting_packages
    shell: dpkg --configure -a
    any_errors_fatal: false
    ignore_errors: true
    changed_when: false
    tags:
    - packages
    - base
# clean cache in case of initial apt failure
  - name: apt_clean
    shell: apt clean all -y
    any_errors_fatal: false
    register: r_apt_clean
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: r_apt_clean is success
    when: r_apt_initial_refresh.failed
    tags:
    - packages
    - base
# Install essentials - packages needed for repos or other packages. Mostly OS-related
  - name: install_essential_packages
    apt:
      name: "{{ item }}"
      state: "{{ install_state }}"
      update_cache: no
    loop: "{{ packages_essential }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: packages_essential
    until: packages_essential is success
    any_errors_fatal: false
    tags:
    - packages
    - base
# Install basic packages
  - name: install_packages
    apt:
      name: "{{ item }}"
      state: "{{ install_state }}"
      update_cache: no
    loop: "{{ packages }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_packages
    until: r_packages is success
    any_errors_fatal: false
    tags:
    - packages
    - base
  - name: install_custom_packages
    apt:
      name: "{{ item }}"
      state: "{{ install_state }}"
      update_cache: no
    loop: "{{ custom_packages | default ([]) }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_custom_packages
    until: r_custom_packages is success
    any_errors_fatal: false
    tags:
    - packages
    - base
    - custom
# Install optional packages - if variable `install_optional` is set to true
  - name: install_optional_packages
    apt:
      name: "{{ item }}"
      state: "{{ install_state }}"
      update_cache: no
    loop: "{{ packages_optional }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: packages_optional
    until: packages_optional is success
    when: install_optional
    any_errors_fatal: false
    tags:
    - packages
    - optional
# Install 3-rd party software not available in repos
  - name: install_extra_deb_packages_from_variables_file
    apt:
      deb: "{{ item }}"
      state: present
      update_cache: no
      only_upgrade: yes
    loop: "{{ deb }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_apt_deb
    until: r_apt_deb is success
    any_errors_fatal: false
    ignore_errors: true
    when: install_deb
    tags:
    - packages
  - name: install_and_upgrade_pip_packages
    pip:
      name: "{{ item }}"
      extra_args: --upgrade --upgrade-strategy=only-if-needed --ignore-installed
      executable: "{{ pip_executable }}"
    loop: "{{ pip }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_pip
    until: r_pip is success
    any_errors_fatal: false
    ignore_errors: true
    when: pip_executable is defined
    tags:
    - packages
    - base
    - python
  - name: install_flatpak_apps
    flatpak:
      name: "{{ item.name|string }}"
      state: present
      method: system
    loop: "{{ flatpak }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_install_flatpak
    until: r_install_flatpak is success
    any_errors_fatal: false
    when: install_flatpak
    tags:
    - packages
    - flatpak
    # Download 3-rd party software and unarchive it to `bin_path` setting +x
  - name: check_if_bin_path_exists
    file:
      path: "{{ bin_path }}"
      state: directory
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    tags:
    - base
    - downloads
    - apps
  - name: download_and_unarchive
    unarchive:
      src: "{{ item.url }}"
      dest: "{{ bin_path }}"
      keep_newer: true
      list_files: yes
      mode: +x
      remote_src: yes
      exclude:
      - LICENSE
      - README.md
      - CHANGELOG.md
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_unarchive
    until: r_unarchive is success
    failed_when: r_unarchive.files is not defined or r_unarchive.files|reject("equalto", "")|list|length==0
    loop: "{{ downloads }}"
    tags:
    - base
    - downloads
    - apps
# Download 3-rd party software and unarchive  it (flatten archive folder tree) to `bin_path` setting +x
  - name: download_unarchive_flatten
    include_tasks: ./tasks/download_files.yml
    loop: "{{ unpack }}"
# Download 3-rd party software to `bin_path` setting +x
  - name: download_regular_files
    get_url:
      url: "{{ item.url }}"
      dest: "{{ bin_path }}/{{ item.destination }}"
      mode: 0755
      force: yes
    loop: "{{ files }}"
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    register: r_download_files
    until: r_download_files is success
    tags:
    - base
    - downloads
    - apps
  - name: put_desktop_files_for_applications
    copy:
      dest: /usr/share/applications
      src: "{{ item.desktop_file }}"
      owner: root
      group: root
      mode: 0644
    loop: "{{ files }}"
    when: item.desktop_file is defined and item.desktop_file | length >0
    any_errors_fatal: false
    register: r_put_desktop_files
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: r_put_desktop_files is success
    tags:
    - base
    - downloads
    - apps
# Start user-related modification block
  - name: user_modifications_block
    block:
    - name: create_or_check_users_groups
      user:
        name: "{{ active_user }}"
        groups:
        - root
        - vboxusers
        - docker
        - adm
        - sudo
        - video
        - cdrom
        - plugdev
        - dialout
        state: present
        append: true
      any_errors_fatal: false
      register: r_active_user_account
      until: r_active_user_account is success
      tags:
      - base
      - user
    - name: fact_for_user_home_dir
      set_fact:
        "active_user_homedir": "{{ r_active_user_account.home }}"
      tags:
      - base
      - user
    - name: make_sure_autostart_folder_exists
      file:
        path: "{{ active_user_homedir }}/.config/autostart"
        state: directory
        owner: "{{ active_user }}"
        group: "{{ active_user }}"
        mode: 0755
      register: create_autostart
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: create_autostart is success
      any_errors_fatal: true
      tags:
      - base
      - user
    - name: create_startup_applications
      copy:
        dest: "{{ active_user_homedir }}/.config/autostart/{{ item.filename }}"
        src: "{{ item.source }}"
        owner: "{{ active_user }}"
        group: "{{ active_user }}"
        force: false
      loop: "{{ startup }}"
      any_errors_fatal: false
      register: r_create_startup_applications
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_create_startup_applications is success
    tags:
    - base
    - user
 # mitogen block
#  - block:
#    - name: check_if_mitogen_path_exists
#      file:
#        path: "{{ item.dest_path }}"
#        state: directory
#      retries: "{{ retries_count }}"
#      delay: "{{ delay_time }}"
#      loop: "{{ mitogen.download }}"
#      register: r_check_if_mitogen_path_exists
#      until: r_check_if_mitogen_path_exists is success
#    - name: download_and_unarchive_mitogen
#      unarchive:
#        src: "{{ item.urls }}"
#        dest: "{{ item.dest_path }}"
#        keep_newer: true
#        remote_src: yes
#        extra_opts: [--strip-components=1]
#      loop: "{{ mitogen.download }}"
#      register: r_download_and_unarchive_mitogen
#      retries: "{{ retries_count }}"
#      delay: "{{ delay_time }}"
#      until: r_download_and_unarchive_mitogen is success
#    - name: enable_mitogen_in_ansible_config
#      ini_file:
#        path: /etc/ansible/ansible.cfg
#        section: "{{ item.section }}"
#        option: "{{ item.option }}"
#        value: "{{ item.value }}"
#        state: present
#        backup: yes
#      retries: "{{ retries_count }}"
#      delay: "{{ delay_time }}"
#      loop: "{{ mitogen.config }}"
#      register: r_enable_mitogen_in_ansible_config
#      until: r_enable_mitogen_in_ansible_config is success
#      when: r_download_and_unarchive_mitogen is success
#    when: install_mitogen
#    tags:
#    - base
#    - downloads
#    - apps
#    - mitogen
#    - ansible
  # start ansible block
  - block:
    - name: check_if_ansible_cfg_exists
      stat:
        path: "{{ ansible.cfg }}"
      register: r_check_if_ansible_cfg_exists
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_check_if_ansible_cfg_exists is success
    - name: fact_if_ansible_cfg_exists
      set_fact:
        ansible_exists: "{{ r_check_if_ansible_cfg_exists.stat.exists }}"
      when: r_check_if_ansible_cfg_exists is success
    - name: change_ansible_options
      ini_file:
        path: /etc/ansible/ansible.cfg
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value|string }}"
        state: present
        backup: yes
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      loop: "{{ ansible.config }}"
      register: r_change_ansible_options
      until: r_change_ansible_options is success
      when: ansible_exists
    when: config_ansible
    tags:
    - ansible
  # start vscode extensions block
  - name: install_vscode_extensions
    block:
    - name: remove_obsolete_extensions
      shell: "code --uninstall-extension {{ item }}|true"
      any_errors_fatal: false
      ignore_errors: true
      loop: "{{ vscode_obsolete }}"
      become: yes
      become_user: "{{ active_user }}"
      register: r_remove_obsolete_extensions
      changed_when: "'was successfully uninstalled!' in r_remove_obsolete_extensions.stdout"
    - name: run_dpkg_query_for_installed_extensions
      shell: dpkg-query -s code | grep 'install ok installed'
      register: r_dpkg_query_vscode
      any_errors_fatal: false
      ignore_errors: true
      changed_when: "r_dpkg_query_vscode.stdout != 'Status: install ok installed'"
      become: yes
      become_user: "{{ active_user }}"
    - name: install_missing_extensions
      shell: if [ ! $(code --list-extensions|grep {{ item }}) ]; then code --install-extension {{ item }} --force; fi
      loop: "{{ vscode }}"
      register: r_install_extension
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_install_extension is success
      become: yes
      become_user: "{{ active_user }}"
      changed_when: r_install_extension.stdout | length > 0
      when: r_dpkg_query_vscode.rc == 0
      any_errors_fatal: false
      ignore_errors: true
    tags:
    - optional
    - user
    - vscode
    when: install_vscode_extensions
  # Start OS related block
  - name: start_os_tweaks
    block:
    # OS related tweaks and finetuning
    - name: set_timezone
      timezone:
        name: "{{ timezone }}"
      any_errors_fatal: false
    - name: add_neofetch_to_bashrc_globals
      lineinfile:
        path: /etc/bash.bashrc
        line: neofetch
      any_errors_fatal: false
    - name: set_avahi_config
      ini_file:
        path: /etc/avahi/avahi-daemon.conf
        section: server
        option: domain-name
        value: alocal
        no_extra_spaces: yes
      any_errors_fatal: false
      ignore_errors: true
      register: r_set_avahi_config
    - name: nsswitch_config
      lineinfile:
        dest: /etc/nsswitch.conf
        regexp: '^hosts:'
        line: 'hosts:          files dns'
        backrefs: yes
      any_errors_fatal: false
      ignore_errors: true
    - name: restart_avahi_after_changes
      systemd:
        name: avahi-daemon
        state: restarted
        enabled: true
      when: r_set_avahi_config is changed and r_set_avahi_config is defined
    - name: enable_timeshift_in_rsync_mode
      shell: timeshift --rsync --yes
      args:
        creates: /etc/timeshift.json
      any_errors_fatal: false
    - name: add_user_to_sudoers
      copy:
        dest: "/etc/sudoers.d/{{ active_user }}"
        owner: root
        group: root
        mode: 0444
        content: |
          {{ active_user }} ALL=(ALL) NOPASSWD: ALL
      any_errors_fatal: false
      retries: "{{ retries_count }}"
    - name: create_fstrim_folder_for_systemd_override
      file:
        path: /etc/systemd/system/fstrim.timer.d
        state: directory
    - name: create_fstrim_override_for_systemd
      copy:
        dest: /etc/systemd/system/fstrim.timer.d/override.conf
        content: |
          [Timer]
          OnCalendar=hourly
          OnBootSec=5m
      register: r_create_fstrim_override
    - name: start_fstrim.timer
      systemd:
        daemon_reload: true
        name: fstrim.timer
        state: restarted
        enabled: true
      when: r_create_fstrim_override.changed
    - name: sysctl_changes
      sysctl:
        name: "{{ item.name|string }}"
        value: "{{ item.value|string }}"
        state: "{{ item.state|string }}"
        reload: yes
      loop: "{{ sysctl }}"
      register: r_sysctl_changes
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_sysctl_changes is success
      when: config_sysctl
    - name: change_alternatives
      alternatives:
        name: "{{ item.name }}"
        path: "{{ item.path }}"
      loop: "{{ alternatives }}"
      register: r_alternatives
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_alternatives is success
    - name: set_EDITOR_variable
      lineinfile:
        dest: "/etc/environment"
        state: present
        regexp: "^{{ item.name }}"
        line: "{{ item.name }}={{ item.value }}"
      loop: "{{ global_env }}"
      register: r_environment
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_environment is success
    - name: reset_dconf_values
      dconf:
        key: "{{ item.key }}"
        state: "{{ item.state }}"
      loop: "{{ dconf }}"
      register: r_dconf_values
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_dconf_values is success
      when: config_dconf and "absent" in item.state
      become: yes
      become_user: "{{ active_user }}"
      tags:
      - dconf
    - name: set_dconf_values
      dconf:
        key: "{{ item.key }}"
        state: "{{ item.state }}"
        value: "{{ item.value|string }}"
      loop: "{{ dconf }}"
      register: r_dconf_values
      retries: "{{ retries_count }}"
      delay: "{{ delay_time }}"
      until: r_dconf_values is success
      when: config_dconf and "present" in item.state
      become: yes
      become_user: "{{ active_user }}"
      tags:
      - dconf
    # Reboot
    tags:
    - user
    - base
  - name: update_all_packages
    apt:
      upgrade: "yes"
      update_cache: yes
      autoclean: yes
    register: apt_upgrade
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: apt_upgrade is success
    tags:
    - base
    - apt
  - name: reboot_after_changes
    reboot:
      pre_reboot_delay: 15
      post_reboot_delay: 15
      msg: "Initial reboot"
    when: (reboot_required is defined and reboot_required) or (apt_upgrade.changed) and (ansible_connection != "local")
    register: r_reboot_after_upgrade
    any_errors_fatal: false
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    until: r_reboot_after_upgrade is success
    tags:
    - base
    - os
  - name: clean_apt_cache
    shell: apt clean all -y
    any_errors_fatal: false
    register: r_clean_apt_cache
    retries: "{{ retries_count }}"
    delay: "{{ delay_time }}"
    changed_when: false
    tags:
    - base
    - os
    - apt
